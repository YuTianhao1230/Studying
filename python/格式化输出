格式化输出的目的是将变量、常量和文本按照我们预先设定的、整洁美观的版式组合成一个字符串。这在生成报告、日志、用户界面信息等场景中至关重要。

Python 发展至今，主要有三种主流的字符串格式化方法。我们将按照**推荐使用**的顺序来讲解：

1.  **f-string (格式化字符串字面量)** - **强烈推荐** (Python 3.6+)
2.  **`str.format()` 方法** - 推荐 (Python 2.6+ & 3.0+)
3.  **`%` 操作符 (百分号格式化)** - 旧式，不推荐在新代码中使用

---

### 1. f-string (格式化字符串字面量)

这是目前最现代、最直观、性能也最好的格式化方式。

#### 核心语法
在字符串前面加上一个 `f` 或 `F`，然后在字符串内部用花括号 `{}` 包裹变量名或表达式。

```python
name = "Alice"
age = 30
# 基本用法
print(f"她的名字是 {name}，年龄是 {age} 岁。")
```
**输出:**
`她的名字是 Alice，年龄是 30 岁。`

#### 强大之处

**a) 可以在 `{}` 中执行表达式**
这是 f-string 的一个巨大优势，代码非常简洁。

```python
print(f"明年她就 {age + 1} 岁了。")
print(f"她的名字大写是：{name.upper()}")
```
**输出:**
```
明年她就 31 岁了。
她的名字大写是：ALICE
```

**b) 使用格式说明符 (Format Specifiers)**
你可以在 `{}` 内的变量或表达式后面加上冒号 `:`，然后跟上格式说明符来控制输出的样式。

**语法:** `f"{value:specifier}"`

*   **控制小数位数** (`.nf`):

    ```python
    pi = 3.14159265
    print(f"圆周率保留两位小数是: {pi:.2f}") # f 表示定点数
    print(f"圆周率保留三位小数是: {pi:.3f}")
    ```
    **输出:**
    ```
    圆周率保留两位小数是: 3.14
    圆周率保留三位小数是: 3.142 (会四舍五入)
    ```

*   **对齐和填充** (`<` 左对齐, `>` 右对齐, `^` 居中):
    `:[fill_char][align][width]`

    ```python
    item = "Apple"
    price = 5.0
    print(f"|{item:<10}| ${price:>8.2f}|") # item 左对齐，宽度10; price 右对齐，宽度8
    
    title = "MENU"
    print(f"{title:^20}")      # 居中对齐，宽度20，默认用空格填充
    print(f"{title:*^20}")     # 居中对齐，用 '*' 填充
    ```
    **输出:**
    ```
    |Apple     | $     5.00|
           MENU           
    ********MENU********
    ```

*   **数字符号** (`+`, `-`, ` `):

    ```python
    positive_num = 42
    negative_num = -42
    print(f"显示正负号: {positive_num:+}, {negative_num:+}")
    print(f"只显示负号(默认): {positive_num}, {negative_num}")
    print(f"正数前留空格: {positive_num: }")
    ```
    **输出:**
    ```
    显示正负号: +42, -42
    只显示负号(默认): 42, -42
    正数前留空格:  42
    ```

*   **千位分隔符** (`,`):

    ```python
    large_number = 1234567890
    print(f"一个大数: {large_number:,}")
    ```
    **输出:**
    `一个大数: 1,234,567,890`

*   **不同进制表示** (`b` 二进制, `o` 八进制, `x` 十六进制):

    ```python
    num = 255
    print(f"{num} 的二进制是 {num:b}")
    print(f"{num} 的八进制是 {num:o}")
    print(f"{num} 的十六进制是 {num:x}")
    print(f"{num} 的带前缀十六进制是 {num:#x}")
    ```
    **输出:**
    ```
    255 的二进制是 11111111
    255 的八进制是 377
    255 的十六进制是 ff
    255 的带前缀十六进制是 0xff
    ```

*   **百分比格式** (`.n%`):

    ```python
    ratio = 0.758
    print(f"成功率是 {ratio:.1%}") # 数字会先乘以100，然后格式化
    ```
    **输出:**
    `成功率是 75.8%`

**c) 如何打印花括号 `{}` 本身？**
使用双花括号 `{{` 和 `}}`。
```python
print(f"在 f-string 中打印花括号: {{这是一个示例}}")
```
**输出:**
`在 f-string 中打印花括号: {这是一个示例}`

---

### 2. `str.format()` 方法

在 f-string 出现之前，`str.format()` 是官方推荐的方式。它比 `%` 格式化更强大、更灵活。

#### 核心语法
使用一个带有 `{}` 占位符的模板字符串，然后调用其 `.format()` 方法传入变量。

#### 用法变体

**a) 按位置传递参数**
```python
name = "Bob"
age = 45
print("姓名: {}, 年龄: {}".format(name, age))
```

**b) 按索引传递参数**
可以改变参数的顺序。
```python
print("年龄: {1}, 姓名: {0}".format(name, age))
```

**c) 按关键字传递参数**
这使得代码可读性更强。
```python
print("姓名: {n}, 年龄: {a}".format(n="Charlie", a=22))
```

**d) 使用格式说明符**
**好消息是，`str.format()` 的格式说明符与 f-string 几乎完全相同。** 它们都遵循相同的“格式规范迷你语言 (Format Specification Mini-Language)”。

```python
pi = 3.14159265
item = "Banana"
price = 2.5

# 语法: "{index_or_key:specifier}"
print("圆周率: {:.2f}, 物品: {:<10}, 价格: ${:>5.2f}".format(pi, item, price))
```
**输出:**
`圆周率: 3.14, 物品: Banana    , 价格: $ 2.50`

---

### 3. `%` 操作符 (百分号格式化)

这是从 C 语言 `printf` 函数继承来的最古老的格式化方式。语法简单，但功能有限，且容易出错。

#### 核心语法
`"模板字符串 %s %d" % (value1, value2)`

其中 `%` 后面跟着一个字符，代表要格式化的数据类型。

*   `%s`: 字符串 (或任何对象，会调用 `str()`)
*   `%d`: 十进制整数
*   `%f`: 浮点数
*   `%%`: 打印 `%` 符号本身

```python
name = "David"
age = 55
print("姓名: %s, 年龄: %d" % (name, age))
```
**输出:**
`姓名: David, 年龄: 55`

#### 控制宽度和精度

```python
pi = 3.14159265
item = "Orange"

print("圆周率: %.2f" % pi)
print("物品: %10s" % item)      # 右对齐，宽度10
print("物品: %-10s" % item)     # 左对-齐，宽度10
```
**输出:**
```
圆周率: 3.14
物品:     Orange
物品: Orange    
```

#### 为什么不推荐使用 `%` 格式化？
1.  **类型匹配**：`%d` 只能用于数字，如果传入字符串会报错。`str.format()` 和 f-string 会自动处理类型转换。
2.  **可读性差**：当有很多变量时，`% (var1, var2, var3, ...)` 的长元组和模板字符串是分离的，难以对应。
3.  **功能局限**：不支持像 f-string 那样直接在里面写表达式。

---

### 总结与最佳实践

| 特性 | f-string | `str.format()` | `%` 操作符 |
| :--- | :--- | :--- | :--- |
| **Python 版本** | 3.6+ | 2.6+, 3.0+ | 所有版本 |
| **语法** | `f"{var}"` | `"{}" .format(var)` | `"%s" % var` |
| **可读性** | **极高** | 良好 | 较差 |
| **性能** | **最快** | 较快 | 最慢 |
| **表达式求值** | **是** | 否 | 否 |
| **推荐度** | ⭐⭐⭐⭐⭐ **(首选)** | ⭐⭐⭐⭐ (兼容旧版或特殊场景) | ⭐ (仅用于维护旧代码) |

#### 最终建议：

1.  **首选 f-string**：只要你的项目使用 Python 3.6 或更高版本，就应该始终使用 f-string。它集可读性、简洁性和高性能于一身。

2.  **`str.format()` 作为备选**：当你需要兼容旧的 Python 版本（如 3.5），或者当你的格式化模板字符串是在程序的其他地方定义或加载时，`str.format()` 是一个非常可靠和强大的选择。

3.  **避免新的 `%` 用法**：尽量不要在你的新代码中使用 `%` 格式化。了解它的语法主要是为了能够阅读和维护那些历史悠久的老代码。
